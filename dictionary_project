political_database = dict()

db = {1: {'d': 10, 'i': 15, 'r': 15},
      2: {'d': 12, 'r': 8}, 
      3: {'d': 10, 'i': 30, 'l': 20, 'r': 22}, 
      4: {'d': 30, 'l': 20, 'r': 30}, 
      5: {'i': 15, 'l': 15, 'r': 15}
    }

def getsumofPeople(db): 
    sum_people = {'d': 0, 'i': 0, 'l': 0, 'r': 0}
    for zip, reg in db.items(): 
        for reg_party, num_people in reg.items(): 
            sum_people[reg_party] += num_people 
            

    return sum_people 


print(getsumofPeople(db))

def initialize(): 
    zips = [1,2,3,4,5]
    parties = ['d','r', 'i', 'l']
    d = {}
    u = {}
    for i in parties: 
        d[i] = 0
        for j in zips: 
            u[j] = dict(d)
    return u
    
  


def printdict(): 
    new_zipcode = initialize()
    with open('C:\\Users\\ST Tangirala\\Python\\test\\fileLinkedList\\read_db.txt', 'r') as t: 
        ziplines = t.readlines()
    
    for line in ziplines: 
        list_line = line.split(":")
        zip_key = int(list_line[0])
        zip_value = list_line[1:]

        for list_value in range(int(len(zip_value)/2)): 
            party = zip_value[2 * (list_value)]
            no_of_people = int(zip_value[2 * (list_value) + 1])
    
            #new_zipcode[[zip_key][party]] = no_of_people
        
    
            new_zipcode[zip_key][party] += no_of_people
        
    return (new_zipcode)
print(printdict())
        
  




def reg_ordering(db, pol_party):
    
    sort_zipcode = {}
    for pol_zipcode, pol_innerdict in db.items(): 
        if pol_party not in pol_innerdict: 
            sort_zipcode[pol_zipcode] = 0 
        else:   
            sort_zipcode[pol_zipcode] = pol_innerdict[pol_party] 
        
           
    return sort_zipcode

print(reg_ordering(db, 'r'))

state_zips = {'CA' : {1,3}, 'WA': {2,4,5}} 
db = {1: {'d': 10, 'i': 15, 'r': 15},
      2: {'d': 12, 'r': 8}, 
      3: {'d': 10, 'i': 30, 'l': 20, 'r': 22}, 
      4: {'d': 30, 'l': 20, 'r': 30}, 
      5: {'i': 15, 'l': 15, 'r': 15}
    }

def state_summary(db, state_zips):
    state_zips = {'CA' : [1,3], 'WA': [2,4,5]} 
    db = {1: {'d': 10, 'i': 15, 'r': 15},
      2: {'d': 12, 'r': 8}, 
      3: {'d': 10, 'i': 30, 'l': 20, 'r': 22}, 
      4: {'d': 30, 'l': 20, 'r': 30}, 
      5: {'i': 15, 'l': 15, 'r': 15}
    }
    state_dict = {}

    for state_key, dict_list in state_zips.items(): 
        state_people = {}
        for zip_code in dict_list: 
            dict_party = db[zip_code]
            for party_key, count in dict_party.items(): 
                if party_key in state_people: 
                    state_people[party_key] += count 
                else: 
                    state_people[party_key] = count 
        state_dict[state_key] = state_people 
    return state_dict
print(state_summary(db, state_zips))

def predicted_winners(db): 
    db = {1: {'d': 10, 'i': 15, 'r': 15},
      2: {'d': 12, 'r': 8}, 
      3: {'d': 10, 'i': 30, 'l': 20, 'r': 22}, 
      4: {'d': 30, 'l': 20, 'r': 30}, 
      5: {'i': 15, 'l': 15, 'r': 15}
    }

    stand_out = {}
    for zip_code, party_inner in db.items(): 
        current_max = 0
        current_key = " "
        for party_key, party_value in party_inner.items(): 
            if party_value > current_max: 
                current_max = party_value 
                current_key = party_key 
            elif party_value == current_max: 
                current_key = 'Tie'
        print(current_key)
        
        if current_key in stand_out: 
            stand_out[current_key].append(zip_code)
        else: 
            stand_out[current_key] = [zip_code]
       
    return stand_out

print(predicted_winners(db))

def biggest_gap(): 
    L = [3,6,12,14,18,23]
    diff_list = []
    for index in range(len(L)-1): 
        diff_list.append(L[index +1]-L[index])
    current_max = 0
    current_max_index = -1 
    for index in range(len(diff_list)): 
        if diff_list[index] > current_max: 
            current_max = diff_list[index]
            current_max_index = index 
    
    diff_tuple = (current_max_index, current_max_index + 1)
    print(diff_list)
    return diff_tuple

print(biggest_gap())




